pool:
  name: pool

workspace:
  clean: all

variables:
  pat: '$(patToken)'

steps:
- task: Powershell@2
  displayName: 'Get all VariableGroups'
  targetType: 'inline'
    script: |
	  $allVariableGroups = @{}
      $patAuth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(":" + $pat))
	  $header = @{"Authorization" = "Basic $patAuth"}
	  $variableGroups = (iwr -Uri https://{serverName}/{collectionName}/{Project}/_apis/distributedtask/variablegroups?api-version=7.0 -Header $header).Content | ConvertFrom-Json
	  foreach ($variableGroup in $variableGroups.value) { 
		$allVariableGroups[$variableGroup.id] = $variableGroup.name
	  }
	  Write-Host "##vso[task.setvariable variable=allVariableGroups]$allVariableGroups"

- task: Powershell@2
  displayName: 'Get variableGroupsIds from relases definitions'
  targetType: 'inline'
    script: |
	  [System.Collections.ArrayList]$usedVariableGroupsIds = @()
      $patAuth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(":" + $pat))
	  $header = @{"Authorization" = "Basic $patAuth"}
	  $defenitions = (iwr -Uri https://{serverName}/{collectionName}/{Project}/_apis/release/definitions?api-version=7.0 -Header $header).Content | ConvertFrom-Json
	  foreach ($defenitionId in $defenitions.value.id) { 
		$defenitionDescription = (iwr -Uri "https://{serverName}/{collectionName}/{Project}/_apis/release/definitions/$($defenitionId)?api-version=7.0" -Header $header).Content | ConvertFrom-Json
		if ($defenitionDescription.variableGroups.count -gt 0) { 
		  foreach ($variableGroup in $defenitionDescription.variableGroups) {
		    if (-Not ($usedVariableGroupsIds.contains($variableGroup))) {
			  Write-Host $variableGroup
			    $usedVariableGroupsIds.Add($variableGroup) | Out-Null
			  }
		  }
		} 
		else { 
		  Write-Host There are no variableGroups in $defenitionDescription.name 
		} 
	  }
	  Write-Host "##vso[task.setvariable variable=usedVariableGroupsIds]$usedVariableGroupsIds"

- task: Powershell@2
  displayName: 'create CSV with unused VariableGroups'
  targetType: 'inline'
    script: |
	  foreach ($usedVariableGroupsId in $usedVariableGroupsIds) {
		$allVariableGroups.Remove($usedVariableGroupsId)
	  }
	  $allVariableGroups.GetEnumerator() | Select-Object -Property Name,Value |
        Export-Csv -NoTypeInformation -Path $(Build.ArtifactStagingDirectory)\UnusedVariableGroups.csv	

- task: AzureFileCopy@4
  displayName: Copy files to storage account
  inputs:
    SourcePath: $(Build.ArtifactStagingDirectory)\UnusedVariableGroups.csv
    azureSubscription: ServiceConnection
    Destination: AzureBlob
    storage: storageaccountName
    ContainerName: containerName
    BlobPrefix: unsedVariableGroups