pool:
  vmImage: 'windows-latest'

workspace:
  clean: all

# We need to create a PAT token to authenticate in api-version
# https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=Windows
# and then add it to pipeline Variables as secret value
variables:
  pat: '$(patToken)'

steps:
# You need to set organization and project in Uris before run it
- task: Powershell@2
  displayName: 'Get all VariableGroups'
  targetType: 'inline'
    script: |
      [System.Collections.ArrayList]$allVariableGroups = @()
      $patAuth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(":" + $pat))
      $header = @{"Authorization" = "Basic $patAuth"}
      $variableGroups = (iwr -Uri https://dev.azure.com/{organization}/{project}/_apis/distributedtask/variablegroups?api-version=7.0 -Header $header).Content | ConvertFrom-Json
      foreach ($variableGroup in $variableGroups.value) { 
        $variableGroupData = @{
          'VariableGroupId' = $variableGroup.id
          'VariableGroupName' = $variableGroup.name
        }
        $allVariableGroups.Add($variableGroupData) | Out-Null
      }
      Write-Host "##vso[task.setvariable variable=allVariableGroups]$allVariableGroups"

# You need to set organization and project in Uris before run it
- task: Powershell@2
  displayName: 'Get variableGroups and releases from relases definitions'
  targetType: 'inline'
    script: |
      $usedVariableGroupsAndReleases = @{}
      $patAuth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(":" + $pat))
      $header = @{"Authorization" = "Basic $patAuth"}
      $defenitions = (iwr -Uri https://vsrm.dev.azure.com/{organization}/{project}/_apis/release/definitions?api-version=7.0 -Header $header).Content | ConvertFrom-Json
      foreach ($defenitionId in $defenitions.value.id) { 
        $defenitionDescription = (iwr -Uri "https://vsrm.dev.azure.com/{organization}/{project}/_apis/release/definitions/$($defenitionId)?api-version=7.0" -Header $header).Content | ConvertFrom-Json
        if ($defenitionDescription.variableGroups.count -gt 0) { 
          [System.Collections.ArrayList]$variableGroupsIds = @()
          foreach ($variableGroup in $defenitionDescription.variableGroups) {
            $variableGroupsIds.Add($variableGroup) | Out-Null
          }
          $usedVariableGroupsAndReleases[$defenitionDescription.name] = $variableGroupsIds
        } 
        else { 
          Write-Host There are no variableGroups in $defenitionDescription.name 
        } 
      }
      Write-Host "##vso[task.setvariable variable=usedVariableGroupsAndReleases]$usedVariableGroupsAndReleases"

- task: Powershell@2
  displayName: 'create CSV with VariableGroups usage information'
  targetType: 'inline'
    script: |
      foreach ($variableGroup in $allVariableGroups) {
        $variableGroupsInReleases = ""
        foreach ($release in $usedVariableGroupsAndReleases.Keys) {
          if ($usedVariableGroupsAndReleases[$release].Contains($variableGroup.VariableGroupId)) {
            $variableGroupsInReleases += $release + ", "
          }
        }
        if ($variableGroupsInReleases.length -gt 0) {
          $variableGroup."UsedInReleases" = $true
          $variableGroup."Releases" = $variableGroupsInReleases
        }
        else {
          $variableGroup."UsedInReleases" = $false
          $variableGroup."Releases" = ""
        }
      }
      $allVariableGroups | ForEach-Object { 
        New-Object PSObject -Property $_ 
      } | Select-Object "VariableGroupName", "UsedInReleases", "Releases" | 
        Export-Csv -NoTypeInformation -Path $(Build.ArtifactStagingDirectory)\VariableGroupsUsageInformation.csv	

# We need to create a Service connection and Azure Storage account before run it following
# https://learn.microsoft.com/en-us/azure/storage/common/storage-account-create?tabs=azure-portal
# and https://learn.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml
- task: AzureFileCopy@6
  displayName: Copy files to storage account
  inputs:
    SourcePath: $(Build.ArtifactStagingDirectory)\VariableGroupsUsageInformation.csv
    azureSubscription: ServiceConnection
    Destination: AzureBlob
    storage: storageaccountName
    ContainerName: containerName
    BlobPrefix: unsedVariableGroups